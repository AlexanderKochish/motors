import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { Toaster } from "sonner";
import styles from "./layout.module.css";
import { dehydrate, HydrationBoundary, QueryClient } from "@tanstack/react-query";
import { ReviewService } from "@/repositories/review";
import { AppointmentService } from "@/repositories/appointmet";
import QueryProviders from "@/providers/QueryProvider";
import { ModalProvider } from "@/providers/ModalProvider/modal-provider";
import AdminLayoutClient from "./admin-layout-client";
import { logout } from "../actions/login";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function AdminLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const queryClient = new QueryClient();
  const service = new ReviewService();
  const serviceAppointment = new AppointmentService();

  await Promise.all([
    queryClient.prefetchQuery({
      queryKey: ["reviews"],
      queryFn: () => service.getRecentReviews(),
    }),
    queryClient.prefetchQuery({
      queryKey: ["appointment"],
      queryFn: () => serviceAppointment.getAllRecentAppointments(),
    }),
  ]);

  return (
    <QueryProviders>
      <HydrationBoundary state={dehydrate(queryClient)}>
        <AdminLayoutClient>{children}</AdminLayoutClient>
        <Toaster />
      </HydrationBoundary>
    </QueryProviders>
  );
}
